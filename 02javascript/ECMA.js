/* ECMA
 */

/* 常量 表示一些固定不变的数据
整型常量：整数
实型常量：小数
字符串常量：
布尔常量：ture/false
自定义常量：ES6中新增的 const 常量名称 = 常量取值（不可改变）
 */

/* 变量 表示一些可以被修改的数据
var 变量名称 = 变量取值
变量间可以相互赋值
ES6之前可重复var 相同名称变量，后var的会覆盖前一个（是否会先抹去之前var占用的内容空间，然后重新占另一个内存空间）
ES6之前浏览器在解析JS代码之前会进行预解析（预处理）操作
预解析（预处理）：将当前JS代码中所有变量的定义和函数的定义放到所有代码的最前面，因此先使用后定义在ES6之前也是可以的，当前不可以
let 变量名称 = 变量取值 
 */

/* 关键字 被JS语言赋予了特殊含义的单词
关键字不能用作变量、函数的名称；
关键字严格区分大小写、多为小写
 */

/* 标识符 为了将莫些东西区分出来的符号（变量名称）
标识符命名规则：
英文字母大小写、阿拉伯数字0~9、下划线_、美元符号$组成
不能以数字开头
严格区分大小写
不可以使用关键字、保留字作为标识符
 */

/* 数据
静态数据：永久的数据，一般存在硬盘中，只要硬盘不损坏，数据永远存在
动态数据：在程序运行中，动态产生的临时数据，一般存储在内存中，数据会在关机重启后会被清空
*/

/* 数据类型 动态数据类型
Number 数值
String 字符串
Boolean 布尔
Undefined 未定义
Null 空值（以上为基本数据类型）
Object 对象(引用数据类型)

数据类型检测：typeof 需要检测的数据
*/

/* 数据类型转换 转换为字符串类型
将 数值 数据类型转换为字符串类型： 常量or变量 + ''/String(变量or常量)/变量名称.toString()
将 布尔 数据类型转换为字符串类型：常量or变量 + ''/String(变量or常量)/变量名称.toString()
将 undefined 数据类型转换为字符串类型：常量or变量/+ '' String(变量or常量)
将 null 数据类型转换为字符串类型：常量or变量 + ''/String(变量or常量)

常量or变量 + ''：最简单的方式将所有类型的常量和变量转换为字符串类型，并不会改变原有数据的数据类型
String(变量or常量)：可以将所有类型的常量和变量转换为字符串类型（重新生成），并不会改变原有数据的数据类型
变量名称.toString()：是将拷贝的变量的数据类型进行转换，并不会改变原有变量的数据类型
*/

/* 数据类型转换 转换为数值类型 
将 字符串 数据类型转换为字符串类型：Number(变量or常量)
将 布尔 数据类型转换为字符串类型：Number(变量or常量)
将 undefined 数据类型转换为字符串类型：Number(变量or常量)
将 null 数据类型转换为字符串类型：Number(变量or常量)

Number(变量or常量)：可以将所有类型的常量和变量转换为数值类型（重新生成），并不会改变原有数据的数据类型,
字符串如果为空字符串转换结果为0，如果字符串中的数据不仅仅是数值转换结果为NaN(not a number)
布尔值true/false的转换结果为1/0
undefined的转换结果为NaN
null 转换结果为0
*/